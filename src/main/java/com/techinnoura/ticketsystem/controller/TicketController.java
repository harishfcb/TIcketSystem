package com.techinnoura.ticketsystem.controller;


import com.techinnoura.ticketsystem.dto.TicketInfo;
import com.techinnoura.ticketsystem.model.Role;
import com.techinnoura.ticketsystem.dao.Ticket;
import com.techinnoura.ticketsystem.dao.TicketEvent;
import com.techinnoura.ticketsystem.model.User;
import com.techinnoura.ticketsystem.service.RoleService;
import com.techinnoura.ticketsystem.service.TicketService;
import com.techinnoura.ticketsystem.service.UserService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/ticketsystem")
public class TicketController {

    @Autowired
    UserService userService;

    @Autowired
    RoleService roleService;

    @Autowired
    TicketService ticketService;

    @PostMapping(value = "/user/save", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public User createUser(@RequestBody @Valid User user) throws Exception {
        return userService.createUser(user);
        /**Create a user to be part of the WorkFlow **/
    }

    @PostMapping(value = "/role/save", consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public Role createRole(@RequestBody @Valid Role role) {
        return roleService.creatRole(role);

        /**Create a RoleType SUPERADMIN,ADMIN,MANAGER,CODER there are only four types of users the role id here
         is Autogenerated the roleId will be Stored  in User **/

    }

    @PostMapping(value = "/ticket/create", consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public TicketInfo createTicket(@RequestBody @Valid TicketInfo ticketInfo) throws Exception {
        return ticketService.createTicket(ticketInfo);

        /**This is used to Created a ticket Initially and will be automatically to manager associated
         * with that user manger will be assigned when user is created.
         */
    }

    @GetMapping(value = "/ticket/read/{ticketId}",produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public List<TicketEvent> readTicketDetails(@PathVariable String ticketId, @RequestParam int pageNumber,
                                               @RequestParam int count) {
        return ticketService.getTicketEvent(ticketId, pageNumber, count);
        /**
         * This is used to view the entire History of the  Ticket
         */
    }

    @PostMapping(value = "/ticket/update", consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public Ticket updateTicket(@RequestBody Ticket ticket) throws Exception {
        return ticketService.updateTicket(ticket);
        /**
         * This is used to update the update the Ticket and workflow is here
         */
    }

    @GetMapping(value = "/ticket/{ticketId}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
    public Ticket getTicket(@PathVariable String ticketId) throws Exception {
        return ticketService.findTicketById(ticketId);

        /**
         * This is used to get the Ticket by its id.In the Ticket Latest Action will be Shown.
         */
    }
}
